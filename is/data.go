package is

import (
	"encoding/base32"
	"encoding/base64"
	"encoding/json"
	"github.com/google/uuid"
)

func JSON(s string) bool {
	return json.Valid([]byte(s))
}

func JSONArray(s string) bool {
	if len(s) < 2 {
		return false
	}
	return s[0] == '[' && s[len(s)-1] == ']' && JSON(s)
}

func JSONObject(s string) bool {
	if len(s) < 2 {
		return false
	}
	return s[0] == '{' && s[len(s)-1] == '}' && JSON(s)
}

func JSONString(s string) bool {
	if len(s) < 2 {
		return false
	}
	return s[0] == '"' && s[len(s)-1] == '"' && JSON(s)
}

func UUID(s string) bool {
	_, err := uuid.Parse(s)
	return err == nil
}

func UUIDV1(s string) bool {
	u, err := uuid.Parse(s)
	return err == nil && u.Version() == 1
}

func UUIDV2(s string) bool {
	u, err := uuid.Parse(s)
	return err == nil && u.Version() == 2
}

func UUIDV3(s string) bool {
	u, err := uuid.Parse(s)
	return err == nil && u.Version() == 3
}

func UUIDV4(s string) bool {
	u, err := uuid.Parse(s)
	return err == nil && u.Version() == 4
}

func UUIDV5(s string) bool {
	u, err := uuid.Parse(s)
	return err == nil && u.Version() == 5
}

func ULID(s string) bool {
	return len(s) == 26 &&
		dec[s[0]] != 0xFF &&
		dec[s[1]] != 0xFF &&
		dec[s[2]] != 0xFF &&
		dec[s[3]] != 0xFF &&
		dec[s[4]] != 0xFF &&
		dec[s[5]] != 0xFF &&
		dec[s[6]] != 0xFF &&
		dec[s[7]] != 0xFF &&
		dec[s[8]] != 0xFF &&
		dec[s[9]] != 0xFF &&
		dec[s[10]] != 0xFF &&
		dec[s[11]] != 0xFF &&
		dec[s[12]] != 0xFF &&
		dec[s[13]] != 0xFF &&
		dec[s[14]] != 0xFF &&
		dec[s[15]] != 0xFF &&
		dec[s[16]] != 0xFF &&
		dec[s[17]] != 0xFF &&
		dec[s[18]] != 0xFF &&
		dec[s[19]] != 0xFF &&
		dec[s[20]] != 0xFF &&
		dec[s[21]] != 0xFF &&
		dec[s[22]] != 0xFF &&
		dec[s[23]] != 0xFF &&
		dec[s[24]] != 0xFF &&
		dec[s[25]] != 0xFF
}

var dec = [...]byte{
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,
	0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14, 0x15, 0xFF,
	0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C, 0x1D, 0x1E,
	0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,
	0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,
	0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,
	0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
}

func Base64(s string) bool {
	if len(s)%4 != 0 {
		return false
	}
	_, err := base64.StdEncoding.DecodeString(s)
	return err == nil
}

func Base32(s string) bool {
	if len(s)%8 != 0 {
		return false
	}
	_, err := base32.StdEncoding.DecodeString(s)
	return err == nil
}
